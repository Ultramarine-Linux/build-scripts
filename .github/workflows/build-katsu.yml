name: Build images (with Katsu)

env:
  KATSU_BUILD_TASK_NAME: "Build image"
  DNF_PKGS: |
    git
    xorriso
    rpm
    limine
    systemd
    btrfs-progs
    e2fsprogs
    xfsprogs
    dosfstools
    grub2
    parted
    util-linux-core
    systemd-container
    grub2-efi
    uboot-images-armv8
    uboot-tools
    rustc
    qemu-user-static-aarch64
    qemu-user-binfmt
    qemu-kvm
    qemu-img
    cargo
    systemd-devel
    mkpasswd
    clang-devel
    moby-engine
    squashfs-tools
    erofs-utils
    grub2-tools
    grub2-tools-extra
    isomd5sum
    moby-engine
    podman
    buildah
    which
    katsu

on:
  push:
  workflow_dispatch:

jobs:
  #### BASE IMAGES ####
  image:
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x86_64
          - aarch64
        variant:
          - base/base-disk
          #- flagship/flagship-chromebook
          # TODO: figure out how to get loop devices to work on our ARM runners
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/terrapkg/builder:f39
      # Pass /dev from host to container
      # Very hacky, but it works
      # Microsoft/Github, if you're reading this,
      # I'm sorry.
      options: --privileged -v /dev:/dev

    steps:
      - name: Install dependencies
        run: |
          dnf install -y $DNF_PKGS
          dnf clean all

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Clone Katsu
        uses: actions/checkout@v4
        with:
          repository: FyraLabs/katsu
          ref: main
          path: katsu
      - name: Build Katsu
        run: |
          pushd katsu
          cargo build --release
          cp target/release/katsu /usr/bin/katsu
          popd
      - name: Checkout
        uses: actions/checkout@v4
      - name: sanitize artifact name
        run: |
          name=$(echo ${{ matrix.variant }} | sed 's/\//-/g')
          name=$name-${{ matrix.arch }}

          # set github variable
          echo artifact=$name >> $GITHUB_ENV
          # Get architecture
          # e.g. base/base-disk-x86_64 -> x86_64
          echo arch=$(echo ${{ matrix.variant }} | cut -d'-' -f3) >> $GITHUB_ENV

      - name: ${{ env.KATSU_BUILD_TASK_NAME }}
        run: |
          chcon system_u:object_r:install_exec_t:s0 "$(which katsu)"
          pushd katsu
          KATSU_LOG=trace KATSU_DRACUT_EXTRA_ARGS="--debug" katsu -v --output=disk-image modules/${{ matrix.variant }}-${{ matrix.arch }}.yaml
          xz -z9 katsu-work/image/katsu.img -c > katsu-work/image/ultramarine-39-${{ matrix.arch }}.img.xz
          popd

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact }}-image
          path: katsu/katsu-work/image/*.img.xz

  live-iso:
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x86_64
          - aarch64
        variant:
          - flagship/flagship-live
          - gnome/gnome-live
          - kde/kde-live
          - pantheon/pantheon-live
    runs-on: ${{ matrix.arch == 'x86_64' && (matrix.variant == 'kde/kde-live' || matrix.variant == 'pantheon/pantheon-live') && 'x86-64-lg' || matrix.arch == 'x86_64' && 'ubuntu-latest' || 'arm64' }}
    container:
      image: ghcr.io/terrapkg/builder:f39
      # Pass /dev from host to container
      # Very hacky, but it works
      # Microsoft/Github, if you're reading this,
      # I'm sorry.
      options: --privileged -v /dev:/dev

    steps:
      - name: Install dependencies
        run: |
          dnf install -y $DNF_PKGS
          dnf clean all
      - name: Clone Katsu
        uses: actions/checkout@v4
        with:
          repository: FyraLabs/katsu
          ref: main
          path: katsu
      - name: Build Katsu
        run: |
          pushd katsu
          cargo build --release
          cp target/release/katsu /usr/bin/katsu
          popd

      - name: sanitize artifact name
        run: |
          name=$(echo ${{ matrix.variant }} | sed 's/\//-/g')

          # set github variable
          echo artifact=$name-${{ matrix.arch }} >> $GITHUB_ENV
          # Get variant name from path
          # e.g. flagship/flagship-live -> flagship
          echo variant=$(echo ${{ matrix.variant }} | cut -d'/' -f1) >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v4
      - name: ${{ env.KATSU_BUILD_TASK_NAME }}
        run: |
          chcon system_u:object_r:install_exec_t:s0 "$(which katsu)"
          pushd katsu
          KATSU_LOG=trace KATSU_DRACUT_EXTRA_ARGS="--debug" katsu -v --output=iso modules/${{ matrix.variant }}.yaml
          # get the ISO name, and then append the arch
          # e.g. flagship-live.iso -> flagship-live-x86_64.iso

          # get the ISO name
          iso=$(ls *.iso)
          # append the arch
          mv $iso $(echo $iso | sed "s/.iso/-${{ matrix.arch }}.iso/")

          rm -rf katsu-work/
          popd

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact }}-iso
          path: katsu/*.iso

  #### LIVE ISO PUSH ####

  push-image:
    runs-on: arm64
    container:
      image: ghcr.io/terrapkg/builder:f40
    environment: production
    needs:
      - live-iso
      - image
    if: github.event_name != 'pull_request'

    steps:
      - name: Install dependencies
        run: |
          dnf install -y wget
          dnf clean all

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate artifact tree
        run: |
          set
          ls -lR
          mkdir -p images

          # for folder in artifacts

          pack_image() {
            file=$1

            type=$2


            IMAGEDIR=images/$type/ultramarine/39/
            mkdir -p $IMAGEDIR

            filename=$(basename -- "$file")
            # create sha256sum
            sha256sum $file > $IMAGEDIR/$filename.sha256sum
            mv $file $IMAGEDIR
          }

          for file in artifacts/*-iso/*; do
            # if is file
            if [ -f "$file" ]; then
              pack_image $file isos
            fi
          done

          for file in artifacts/*-image/*; do
            # if is file
            if [ -f "$file" ]; then
              pack_image $file images
            fi
          done

      - name: Upload to R2
        run: |
          wget https://dl.min.io/client/mc/release/linux-arm64/mc
          chmod +x ./mc
          ./mc alias set r2 '${{ secrets.S3_ENDPOINT }}' '${{ secrets.S3_KEY_ID }}' '${{ secrets.S3_SECRET_KEY }}'
          ./mc mirror --overwrite images 'r2/images'
